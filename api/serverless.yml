org: jpbogle
app: cardinal
service: cardinal-namespaces
frameworkVersion: "2 || 3"

provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: "20201221"

package:
  individually: false
  exclude:
    - "./node_modules"
    - "./yarn.lock"

functions:
  ################################ V1 Twitter ################################
  v1-twitter-approver:
    handler: twitter-approver/handler.approve
    timeout: 30
    environment:
      TWITTER_SOLANA_KEY: ${ssm:/TWITTER_SOLANA_KEY~true}
      DISCORD_SOLANA_KEY: ${ssm:/DISCORD_SOLANA_KEY~true}
    events:
      - http:
          path: /approve
          method: get
          cors: true
  v1-twitter-revoker:
    handler: twitter-revoker/handler.revoke
    timeout: 30
    environment:
      TWITTER_SOLANA_KEY: ${ssm:/TWITTER_SOLANA_KEY~true}
      DISCORD_SOLANA_KEY: ${ssm:/DISCORD_SOLANA_KEY~true}
    events:
      - http:
          path: /revoke
          method: get
          cors: true
  v1-twitter-proxy:
    handler: twitter-proxy/handler.proxy
    events:
      - http:
          path: /proxy
          method: get
          cors: true
          caching:
            enabled: true
            ttlInSeconds: 3600 # overrides the global setting for ttlInSeconds
            perKeyInvalidation:
              requireAuthorization: false # default is true
            cacheKeyParameters:
              - name: request.path.url
              - name: request.path.usernames

  ################################ Twitter ################################
  twitter-approver:
    handler: twitter-approver/handler.approve
    timeout: 30
    environment:
      TWITTER_SOLANA_KEY: ${ssm:/TWITTER_SOLANA_KEY~true}
      DISCORD_SOLANA_KEY: ${ssm:/DISCORD_SOLANA_KEY~true}
    events:
      - http:
          path: /twitter/approve
          method: get
          cors: true
  twitter-verifier:
    handler: twitter-verifier/handler.verify
    environment:
      TWITTER_SOLANA_KEY: ${ssm:/TWITTER_SOLANA_KEY~true}
      DISCORD_SOLANA_KEY: ${ssm:/DISCORD_SOLANA_KEY~true}
    events:
      - http:
          path: /twitter/verify
          method: get
          cors: true
  twitter-claimer:
    handler: twitter-claimer/handler.claim
    environment:
      TWITTER_SOLANA_KEY: ${ssm:/TWITTER_SOLANA_KEY~true}
      DISCORD_SOLANA_KEY_KEY: ${ssm:/DISCORD_SOLANA_KEY~true}

    events:
      - http:
          path: /twitter/claim
          method: post
          cors: true
  twitter-revoker:
    handler: twitter-revoker/handler.revoke
    timeout: 30
    environment:
      TWITTER_SOLANA_KEY: ${ssm:/TWITTER_SOLANA_KEY~true}
      DISCORD_SOLANA_KEY: ${ssm:/DISCORD_SOLANA_KEY~true}
    events:
      - http:
          path: /twitter/revoke
          method: get
          cors: true
  twitter-proxy:
    handler: twitter-proxy/handler.proxy
    events:
      - http:
          path: /twitter/proxy
          method: get
          cors: true
          caching:
            enabled: true
            ttlInSeconds: 3600 # overrides the global setting for ttlInSeconds
            perKeyInvalidation:
              requireAuthorization: false # default is true
            cacheKeyParameters:
              - name: request.path.url
              - name: request.path.usernames

  ################################ Passbase ################################
  passbase-webhook:
    handler: passbase-webhook/handler.webhook
    events:
      - http:
          path: /passbase/webhook
          method: post
    environment:
      PASSBASE_WEBHOOK_SECRET: ${ssm:/PASSBASE_WEBHOOK_SECRET~true}
      PASSBASE_SECRET_KEY: ${ssm:/PASSBASE_SECRET_KEY~true}
      KYC_SECRET_KEY: ${ssm:/KYC_SECRET_KEY~true}
      SES_ACCESS_KEY_ID: ${ssm:/SES_ACCESS_KEY_ID~true}
      SES_SECRET_ACCESS_KEY: ${ssm:/SES_SECRET_ACCESS_KEY~true}
  passbase-data:
    handler: passbase-data/handler.data
    events:
      - http:
          path: /passbase/data
          method: get

  ################################ Typeform ################################
  typeform-approver:
    handler: typeform-approver/handler.approve
    timeout: 60
    events:
      - http:
          path: /typeform/approve
          method: post
          cors: true
    environment:
      CLUSTER: ${ssm:/CLUSTER~true}
      EMPIREDAO_SCAN_KEY: ${ssm:/EMPIREDAO_SCAN_KEY~true}
      SES_ACCESS_KEY_ID: ${ssm:/SES_ACCESS_KEY_ID~true}
      SES_SECRET_ACCESS_KEY: ${ssm:/SES_SECRET_ACCESS_KEY~true}
      SLACK_SECRET_KEY: ${ssm:/SLACK_SECRET_KEY~true}
  typeform-data-offline:
    handler: typeform-data/offline.data
    timeout: 30
    environment:
      TYPEFORM_ID: ${ssm:/TYPEFORM_ID~true}
      TYPEFORM_API_KEY: ${ssm:/TYPEFORM_API_KEY~true}
    events:
      - http:
          path: /typeform/data/offline
          method: post
          cors: true
  typeform-data-online:
    handler: typeform-data/online.data
    timeout: 30
    environment:
      TYPEFORM_ID: ${ssm:/TYPEFORM_ID~true}
      TYPEFORM_API_KEY: ${ssm:/TYPEFORM_API_KEY~true}
    events:
      - http:
          path: /typeform/data/online
          method: get
          cors: true

custom:
  # domains:
  #   main:
  #     domainName: api.cardinal.so
  #   dev:
  #     domainName: dev-api.cardinal.so
  # customDomains:
  # NOTE: For some fucked up reason serverless doesn't allow for multiple by AWS UI does so it's set like this directly in AWS UI
  #   - rest:
  #       domainName: ${self:custom.domains.${opt:stage}.domainName}
  #       basePath: twitter
  #       certificateName: "*.cardinal.so"
  #       createRoute53Record: true
  #   - rest:
  #       domainName: ${self:custom.domains.${opt:stage}.domainName}
  #       basePath: namespaces
  #       certificateName: "*.cardinal.so"
  #       createRoute53Record: true
  apiGatewayCaching:
    enabled: true

plugins:
  # - serverless-domain-manager
  - serverless-plugin-common-excludes
  - serverless-api-gateway-caching
  - serverless-plugin-typescript
  - serverless-offline
  - serverless-plugin-include-dependencies
